#!/bin/bash
##################################################################
#: Date Created  : (April 08, 2020)
#: Author        : Daniel Griggs
#: Email         : dan@cmdsec.com
#: Version       : 0.10
##################################################################


######################
### VARIABLE BLOCK ###
######################

# Set preferences
hdvideo="true"
ssodefault="true"
ssohost="$4"
# choose language (en-US, fr, de)
lang="en-US"
pkgfile="ZoomInstallerIT.pkg"
plistfile="us.zoom.config.plist"
logfile="/Library/Logs/ZoomInstallScript.log"
GUI_USER=$(who | grep console | grep -v '_mbsetupuser' | awk '{print $1}')
######################
# END VARIABLE BLOCK #
######################

# Check if meeting is active, zoom only has udp connections
#   during a call
if [[ -n $(lsof -i UDP | grep -i zoom) ]]; then
  #statements
  echo "zoom meeting running, exiting"
  exit 0
fi


setup_enforced_settings(){
  rm /Library/Preferences/us.zoom.config.plist
  defaults write /Library/Preferences/us.zoom.config.plist nogoogle -bool true
  defaults write /Library/Preferences/us.zoom.config.plist nofacebook -bool true
  defaults write /Library/Preferences/us.zoom.config.plist ZAutoJoinVoip -bool true
  defaults write /Library/Preferences/us.zoom.config.plist ZAutoSSOLogin -bool true
  defaults write /Library/Preferences/us.zoom.config.plist ZSSOHost "$ssohost"
  defaults write /Library/Preferences/us.zoom.config.plist ZUse720PByDefault -bool true
}


decide_if_needs_upgrade(){
  ## Get OS version and adjust for use with the URL string
  OSvers_URL=$( sw_vers -productVersion | sed 's/[.]/_/g' )

  ## Set the User Agent string for use with curl
  userAgent="Mozilla/5.0 (Macintosh; Intel Mac OS X ${OSvers_URL}) AppleWebKit/535.6.2 (KHTML, like Gecko) Version/5.2 Safari/535.6.2"

  # Get the latest version of Reader available from Zoom page.
  latestver=$(/usr/bin/curl -s -A "$userAgent" https://zoom.us/download | grep 'ZoomInstallerIT.pkg' | awk -F'/' '{print $3}')
  echo "Latest Version is: $latestver"

  # Get the version number of the currently-installed Zoom, if any.
  if [ -e "/Applications/zoom.us.app" ]; then
  currentInstalledVer=$(/usr/bin/defaults read /Applications/zoom.us.app/Contents/Info CFBundleVersion)
          echo "Current installed version is: $currentInstalledVer"
          if [ ${latestver} = ${currentInstalledVer} ]; then
                  echo "Zoom is current. Exiting"
          fi
  else
          currentInstalledVer="none"
          echo "Zoom is not installed"
  fi

  url="https://zoom.us/client/${latestver}/ZoomInstallerIT.pkg"

  echo "Latest version of the URL is: $url"
  echo "$(date): Download URL: $url" >> ${logfile}

  # Compare the two versions, if they are different or Zoom is not present then download and install the new version.
  if [[ "${currentInstalledVer}" != "${latestver}" ]]; then
    needsUpgrade="true"
  fi
}

download_and_install_latest_version(){
# Download and install new version
  /bin/echo "$(date): Current Zoom version: ${currentInstalledVer}" >> ${logfile}
  /bin/echo "$(date): Available Zoom version: ${latestver}" >> ${logfile}
  /bin/echo "$(date): Downloading newer version." >> ${logfile}

  /usr/bin/curl -sLo /tmp/${pkgfile} ${url}

  /bin/echo "$(date): Installing PKG..." >> ${logfile}
  /usr/sbin/installer -pkg /tmp/${pkgfile} -target /

  /bin/sleep 10
  /bin/echo "$(date): Deleting downloaded PKG." >> ${logfile}
  /bin/rm /tmp/${pkgfile}

  #double check to see if the new version got updated
  newlyinstalledver=$(/usr/bin/defaults read /Applications/zoom.us.app/Contents/Info CFBundleVersion)
  if [[ "${latestver}" = "${newlyinstalledver}" ]]; then
      /bin/echo "$(date): SUCCESS: Zoom has been updated to version ${newlyinstalledver}" >> ${logfile}
      # /Library/Application\ Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper -windowType hud -title "Zoom Installed" -description "Zoom has been updated." &
  else
      /bin/echo "--" >> ${logfile}
  fi
}

decide_if_needs_upgrade
if [[ $needsUpgrade == "true" ]]; then
  #statements
  download_and_install_latest_version
else
  # If Zoom is up to date already, just log it and exit.
  /bin/echo "$(date): Zoom is already up to date, running ${currentInstalledVer}."
fi 
setup_enforced_settings

exit 0
